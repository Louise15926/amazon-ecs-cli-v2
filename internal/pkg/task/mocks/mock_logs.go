// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/pkg/task/logs.go

// Package mocks is a generated GoMock package.
package mocks

import (
	cloudwatchlogs "github.com/aws/copilot-cli/internal/pkg/aws/cloudwatchlogs"
	ecs "github.com/aws/copilot-cli/internal/pkg/aws/ecs"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockTasksDescriber is a mock of TasksDescriber interface
type MockTasksDescriber struct {
	ctrl     *gomock.Controller
	recorder *MockTasksDescriberMockRecorder
}

// MockTasksDescriberMockRecorder is the mock recorder for MockTasksDescriber
type MockTasksDescriberMockRecorder struct {
	mock *MockTasksDescriber
}

// NewMockTasksDescriber creates a new mock instance
func NewMockTasksDescriber(ctrl *gomock.Controller) *MockTasksDescriber {
	mock := &MockTasksDescriber{ctrl: ctrl}
	mock.recorder = &MockTasksDescriberMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockTasksDescriber) EXPECT() *MockTasksDescriberMockRecorder {
	return m.recorder
}

// DescribeTasks mocks base method
func (m *MockTasksDescriber) DescribeTasks(cluster string, taskARNs []string) ([]*ecs.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeTasks", cluster, taskARNs)
	ret0, _ := ret[0].([]*ecs.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeTasks indicates an expected call of DescribeTasks
func (mr *MockTasksDescriberMockRecorder) DescribeTasks(cluster, taskARNs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeTasks", reflect.TypeOf((*MockTasksDescriber)(nil).DescribeTasks), cluster, taskARNs)
}

// MockTaskEventsLogger is a mock of TaskEventsLogger interface
type MockTaskEventsLogger struct {
	ctrl     *gomock.Controller
	recorder *MockTaskEventsLoggerMockRecorder
}

// MockTaskEventsLoggerMockRecorder is the mock recorder for MockTaskEventsLogger
type MockTaskEventsLoggerMockRecorder struct {
	mock *MockTaskEventsLogger
}

// NewMockTaskEventsLogger creates a new mock instance
func NewMockTaskEventsLogger(ctrl *gomock.Controller) *MockTaskEventsLogger {
	mock := &MockTaskEventsLogger{ctrl: ctrl}
	mock.recorder = &MockTaskEventsLoggerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockTaskEventsLogger) EXPECT() *MockTaskEventsLoggerMockRecorder {
	return m.recorder
}

// TaskLogEvents mocks base method
func (m *MockTaskEventsLogger) TaskLogEvents(logGroupName string, streamLastEventTime map[string]int64, opts ...cloudwatchlogs.GetLogEventsOpts) (*cloudwatchlogs.LogEventsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{logGroupName, streamLastEventTime}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TaskLogEvents", varargs...)
	ret0, _ := ret[0].(*cloudwatchlogs.LogEventsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TaskLogEvents indicates an expected call of TaskLogEvents
func (mr *MockTaskEventsLoggerMockRecorder) TaskLogEvents(logGroupName, streamLastEventTime interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{logGroupName, streamLastEventTime}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TaskLogEvents", reflect.TypeOf((*MockTaskEventsLogger)(nil).TaskLogEvents), varargs...)
}
